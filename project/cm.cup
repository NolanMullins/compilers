/*
  Created by: Fei Song
  File Name: tiny.cup
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, THEN, ELSE, END, REPEAT, READ, WRITE, RETURN;
terminal ASSIGN, EQ, LT, GT, LTE, GTE, NE, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREN, LSQBRK, RSQBRK, SEMI, COMMA;
terminal String ID, NUM, INT, VOID;
terminal ERROR;
   
/*non terminal Exp program1;*/
non terminal ExpList program, dec_seq, stmt_seq;
non terminal Exp stmt, if_stmt, repeat_stmt, assign_stmt, read_stmt, write_stmt;
non terminal Exp exp, simple_exp, term, factor, dec, dec_fun, dec_var;  

/*todo add all new non terminals*/

/* ----------------------------Grammar Section-------------------- */
   
start with program;

/* 1. {Program}  */
program	      ::= dec_seq:s
                 {: RESULT = s; :}
              ;

/* 2. Declaration List  */
dec_seq         ::= dec_seq:s1 dec:s2
                    {: ExpList t = s1;
                        while( t.tail != null )
                        t = t.tail;
                        t.tail = new ExpList(s2, null);
                        RESULT = s1;
                    :}
                |   dec:s 
                    {: RESULT = new ExpList(s, null); :}
                |   error SEMI dec:s
                    {: 
                        parser.report_error("invalid decleration near "+s, null); 
                        RESULT = new ExpList(s, null); 
                    :}
               ;

/* 3. Declaration  */
dec             ::= dec_var: v
                    {: RESULT = v; :}
                |   dec_fun: f
                    {: RESULT = f; :}
                ;

/* 4. Variable Declaration  */
dec_var         ::= type_spec:t ID:i SEMI
                    {: /*todo*/ :}
                |   type_spec:t ID:i LSQBRK NUM:n RSQBRK SEMI
                    {: /*todo*/ :} 
                ;

/* 5. Type Specifier  */
type_spec       ::= INT
                    {: /*todo*/ :}
                |   VOID
                    {: /*todo*/ :} 
                ;

/* 6. Function Declaration  */
dec_fun         ::= type_spec:t ID:i LPAREN params:s RPAREN stmt_seq:s
                    {: /*todo*/ :}
                ;

/* 7. Paramaters  */
params          ::= param_seq:s
                    {: /*todo*/ :}
                |   type_spec:s
                    {: /*todo only allow void, might get away with not checking*/ :}
                ;

/* 8. Paramaters List  */
                /*todo needs ,*/
param_seq       ::= param_seq:s , param:p
                    {: /*todo*/ :}
                |   param:p
                    {: /*todo*/ :}
                ;

/* 9. Parameter  */
param           ::= type_spec:t ID:i 
                    {: /*todo*/ :}
                |   type_spec:t ID:i LSQBRK RSQBRK
                    {: /*todo*/ :}
                ;

/* the above are the first 9 rules */

/* 10. Compound Statement */
cmpd_stmt       ::= THEN local_decs dec_var END
                    {: /*todo*/ :}
                ;

/* 11. Local Declarations */
local_decs      ::= local_decs dec_var
                    {: /*todo*/ :}
                |   /*todo: this is nothing - which will be an epsilon transition*/
                    {: /*todo: epsilon transition here */ :}
                ;

/* 12. Statement List */
stmt_list       ::= stmt_list stmt
                    {: /*todo*/ :}
                |   /*todo: this is nothing - which will be an epsilon transition*/
                    {: /*todo: epsilon transition here */ :}
                ;

/* 13. Statement */
stmt          ::= exp_stmt
                  {: /*todo*/ :}
              |   cmpd_stmt
                  {: /*todo*/ :}
              |   sel_stmt
                  {: /*todo*/ :}
              |   iter_stmt
                  {: /*todo*/ :}
              |   ret_stmt
                  {: /*todo*/ :}
              ;

/* 14. Expression Statement */
exp_stmt      ::= exp SEMI 
                  {: /*todo*/ :}
              |   SEMI
                  {: /*todo*/ :}
              ;

/* 15. Selection Statement */
sel_stmt      ::= IF LPAREN exp RPAREN stmt
                  {: /*todo*/ :}
              |   IF LPAREN exp RPAREN stmt ELSE stmt
                  {: /*todo*/ :}
              ;

/* While Statment we will need for other rules*/
while_stmt    ::= REPEAT:r LPAREN exp:e RPAREN THEN stmt_seq:s END
                 {: RESULT = new RepeatExp(rleft, rright, e, s); :}
              ;

/* 16. Iteration Statement */
iter_stmt     ::= while_stmt LPAREN exp RPAREN stmt
                  {: /*todo*/ :}
              ;

/* 17. Return Statement */
ret_stmt      ::= RETURN exp SEMI
                  {: /*todo*/ :}
              |   RETURN SEMI
                  {: /*todo*/ :}
              ;

/* 18. Expression */
exp           ::= var ASSIGN exp
                  {: /*todo*/ :}
              |   sim_exp
                  {: /*todo*/ :}
              ;

/* 19. Variable */
var           ::= ID
                  {: /*todo*/ :}
              |   ID LSQBRK exp RSQBRK
                  {: /*todo*/ :}
              ;

/* 20. Simple Expression */
sim_exp       ::= add_exp relop add_exp
                  {: /*todo*/ :}
              |   add_exp
                  {: /*todo*/ :}
              ;

/* 21. Relative Operation */
relop       ::= LTE 
                {: /*todo*/ :}
            |   LT
                {: /*todo*/ :}
            |   GT
                {: /*todo*/ :}
            |   GTE
                {: /*todo*/ :}
            |   EQ
                {: /*todo*/ :}
            |   NE
                {: /*todo*/ :}
            ;

/* 22. Additive Expression */
add_exp       ::= add_exp addop term
                  {: /*todo*/ :}
              |   term
                  {: /*todo*/ :}
              ;

/* 23. Addition / Subtraction Operation */
addop       ::= PLUS
                {: /*todo*/ :}
            |   MINUS
                {: /*todo*/ :}
            ;

/* 24. Term */
term        ::= term mulop factor
                {: /*todo*/ :}
            |   factor
                {: /*todo*/ :}
            ;

/* 25. Multiplication / Division Operation */
mulop       ::= TIMES
                {: /*todo*/ :}
            |   OVER
                {: /*todo*/ :}
            ;

/* 26. Factor  */
factor      ::= LPAREN exp RPAREN
                {: /*todo*/ :}
            |   var
                {: /*todo*/ :}
            |   call
                {: /*todo*/ :}
            |   NUM:n
                {: /*todo*/ :}
            ;

/* 27. Call  */
call        ::= ID LPAREN args RPAREN
                {: /*todo*/ :}
            ;

/* 28. Arguments  */
args        ::= arg_list
                {: /*todo*/ :}
            |   /*todo: this is nothing - which will be an epsilon transition*/
                {: /*todo: epsilon transition here */ :}
            ;

/* 29. Argument List  */
arg_list    ::= arg_list COMMA exp
                {: /*todo*/ :}
            |   exp
                {: /*todo*/ :}
            ;


/* These are his examples */
stmt_seq     ::= stmt_seq:s1 stmt:s2
                 {: ExpList t = s1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new ExpList(s2, null);
                    RESULT = s1;
                 :}
               | stmt:s
                 {: RESULT = new ExpList(s, null); :}
               | error SEMI stmt:s
                 {: parser.report_error("invalid statement near "+s, null); 
                    RESULT = new ExpList(s, null); 
                 :}
               ;

stmt         ::= if_stmt:i
                 {: RESULT = i; :}
               | repeat_stmt:r
                 {: RESULT = r; :}
               | assign_stmt:a
                 {: RESULT = a; :}
               | read_stmt:r
                 {: RESULT = r; :}
               | write_stmt:w
                 {: RESULT = w; :}
               ;

if_stmt      ::= IF:i LPAREN exp:e RPAREN THEN stmt_seq:s END
                 {: RESULT = new IfExp(ileft, iright, e, s, null); :}
               | IF:i LPAREN exp:e RPAREN THEN stmt_seq:s1 END ELSE THEN stmt_seq:s2 END
                 {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
               ;

repeat_stmt  ::= REPEAT:r LPAREN exp:e RPAREN THEN stmt_seq:s END
                 {: RESULT = new RepeatExp(rleft, rright, e, s); :}
               ;

assign_stmt  ::= ID:i ASSIGN exp:e SEMI
                 {: RESULT = new AssignExp(ileft, iright, new VarExp(ileft, iright, i), e); :} 
               ;

read_stmt    ::= READ:r ID:i
                 {: RESULT = new ReadExp(rleft, rright, new VarExp(rleft, rright, i)); :}
               ;

write_stmt   ::= WRITE:w exp:e
                 {: RESULT = new WriteExp(wleft, wright, e); :}
               ;

exp          ::= simple_exp:s1 LT simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.LT, s2); :}
               | simple_exp:s1 GT simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.GT, s2); :}
               | simple_exp:s1 EQ simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.EQ, s2); :}
               | simple_exp:s
                 {: RESULT = s; :}
               ;

simple_exp   ::= simple_exp:s PLUS term:t
                 {: RESULT = new OpExp(sleft, sright, s, OpExp.PLUS, t); :}
               | simple_exp:s MINUS term:t
                 {: RESULT = new OpExp(sleft, sright, s, OpExp.MINUS, t); :}
               | term:t
                 {: RESULT = t; :}
               ;

term         ::= term:t TIMES factor:f
                 {: RESULT = new OpExp(tleft, tright, t, OpExp.TIMES, f); :}
               | term:t OVER factor:f
                 {: RESULT = new OpExp(tleft, tright, t, OpExp.OVER, f); :}
               | factor:f
                 {: RESULT = f; :}
               ;

factor       ::= LPAREN exp:e RPAREN
                 {: RESULT = e; :}
               | NUM:n
                 {: RESULT = new IntExp(nleft, nright, n); :}
               | ID:i
                 {: RESULT = new VarExp(ileft, iright, i); :}
               ;
